[preset.0]

name="Web"
platform="Web"
runnable=true
advanced_options=true
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="*.env, *.js, *.worker.js"
exclude_filter=""
export_path="WebTest/index.html"
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=true
encrypt_directory=false
script_export_mode=2

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
variant/thread_support=false
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<meta http-equiv=\"Cross-Origin-Opener-Policy\" content=\"same-origin\">
	<meta http-equiv=\"Cross-Origin-Embedder-Policy\" content=\"require-corp\">

	<!-- Tesseract.js for handwriting recognition -->
	<script src=\"https://cdn.jsdelivr.net/npm/tesseract.js@6.0.1/dist/tesseract.min.js\"></script>

	<!-- Handwriting recognition script for Godot -->
	<script>
		// For storing the challenge word globally for debugging
		window.currentChallengeWord = \"\";

		// Function to set the current challenge word for better debugging
		window.setChallengeWord = function (word) {
			window.currentChallengeWord = word;
			console.log(\"Challenge word set to:\", word);
		};

		document.addEventListener('DOMContentLoaded', function () {
			// Verify Tesseract is loaded
			if (typeof Tesseract !== 'undefined') {
				console.log(\"Tesseract.js loaded successfully!\");

				// Pre-load the English language model
				Tesseract.createWorker({
					logger: progress => console.log('Loading OCR:', progress),
				}).then(worker => {
					window.tesseractWorker = worker;
					worker.load().then(() => {
						worker.loadLanguage('eng').then(() => {
							worker.initialize('eng').then(() => {
								console.log(\"Tesseract initialized and ready for handwriting recognition\");
							});
						});
					});
				});

				// Initialize handwriting recognition functionality
				window.recognizeHandwriting = function (imageData, canvasWidth, canvasHeight) {
					return new Promise((resolve) => {
						// Create a canvas to process the image
						const canvas = document.createElement('canvas');
						canvas.width = canvasWidth;
						canvas.height = canvasHeight;
						const ctx = canvas.getContext('2d');

						const img = new Image();
						img.onload = function () {
							// Draw image on white background
							ctx.fillStyle = 'white';
							ctx.fillRect(0, 0, canvas.width, canvas.height);
							ctx.drawImage(img, 0, 0);

							// Process image for better recognition
							const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
							const data = imageData.data;

							// Apply thresholding to improve contrast
							for (let i = 0; i < data.length; i += 4) {
								const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
								const val = avg < 128 ? 0 : 255;
								data[i] = data[i + 1] = data[i + 2] = val;
							}
							ctx.putImageData(imageData, 0, 0);

							// Recognize text with Tesseract
							if (window.tesseractWorker) {
								// Set Tesseract options to optimize for handwriting
								const tesseractOptions = {
									lang: 'eng',
									tessedit_char_whitelist: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
									// Improved handwriting recognition settings
									preserve_interword_spaces: '1',
									tessedit_pageseg_mode: '10', // Treat as single character line
									tessjs_create_hocr: '0',
									tessjs_create_tsv: '0',
									tessjs_create_box: '0',
									tessedit_do_invert: '0',
									tessedit_char_blacklist: '|=_-+<>[]{}',
									textord_heavy_nr: '1', // More aggressive noise removal
									textord_min_linesize: '2.5' // Helps with handwriting
								};

								window.tesseractWorker.recognize(canvas.toDataURL('image/png'), tesseractOptions).then(result => {
									console.log(\"OCR Result:\", result);

									// Check if the confidence is too low
									if (result.data.confidence < 10) {
										console.warn(\"Low confidence OCR result:\", result.data.confidence);
										resolve(\"recognition_error\");
										return;
									}

									// Extract the text from the OCR result
									let text = result.data.text.trim();

									// Post-process the text
									// Remove line breaks and special characters
									text = text.replace(/[\\r\\n]+/g, ' ');
									text = text.replace(/[^a-zA-Z0-9 ]/g, '');

									// If result is multiple words, take the first word
									const words = text.split(/\\s+/);
									if (words.length > 0 && words[0].length > 0) {
										text = words[0].toLowerCase(); // Convert to lowercase for consistent matching
										console.log(\"Final recognized text:\", text);
									} else {
										text = \"recognition_error\";
									}

									// Log the original challenge word and the recognized word for debugging
									console.log(\"Challenge word (expected):\", window.currentChallengeWord || \"unknown\");
									console.log(\"OCR recognized word:\", text);

									resolve(text);
								}).catch(err => {
									console.error(\"OCR error:\", err);
									resolve(\"recognition_error\");
								});
							} else {
								console.warn(\"Tesseract worker not initialized, using fallback\");
								resolve(\"recognition_fallback\");
							}
						};

						img.onerror = function () {
							console.error(\"Failed to load image for recognition\");
							resolve(\"recognition_error\");
						};

						img.src = 'data:image/png;base64,' + imageData;
					});
				};

				// Utility for pre-processing handwriting image
				window.preprocessHandwritingImage = function (imageBase64, canvasWidth, canvasHeight) {
					return new Promise((resolve) => {
						const img = new Image();
						const canvas = document.createElement('canvas');
						const ctx = canvas.getContext('2d');

						canvas.width = canvasWidth;
						canvas.height = canvasHeight;

						img.onload = function () {
							// Draw image on white background
							ctx.fillStyle = 'white';
							ctx.fillRect(0, 0, canvas.width, canvas.height);
							ctx.drawImage(img, 0, 0);

							// Process the image to enhance recognition
							const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
							const data = imageData.data;

							// Apply thresholding and contrast enhancement
							for (let i = 0; i < data.length; i += 4) {
								const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
								const value = avg < 128 ? 0 : 255;

								data[i] = data[i + 1] = data[i + 2] = value;
							}

							ctx.putImageData(imageData, 0, 0);
							resolve(canvas.toDataURL('image/png').split(',')[1]);
						};

						img.src = 'data:image/png;base64,' + imageBase64;
					});
				};
			} else {
				console.warn(\"Tesseract.js not loaded - handwriting recognition will use fallback method\");
			}
		});
	</script>

	<script>
		// Initialize speech synthesis as early as possible for web platform
		document.addEventListener('DOMContentLoaded', function() {
			console.log('Initializing speech synthesis');
			
			// Try to initialize speech synthesis
			if ('speechSynthesis' in window) {
				// Get available voices immediately
				window.speechSynthesis.getVoices();
				
				// Set up voice change event handler
				if (typeof speechSynthesis.onvoiceschanged !== 'undefined') {
					speechSynthesis.onvoiceschanged = function() {
						console.log('Voices loaded:', window.speechSynthesis.getVoices().length);
					};
				}
				
				// Create a silent utterance to initialize the system
				const silence = new SpeechSynthesisUtterance('');
				silence.volume = 0; // Silent
				window.speechSynthesis.speak(silence);
				
				// Set up user interaction handler for browsers that need it
				document.addEventListener('click', function initAudio() {
					if (window.speechSynthesis) {
						const click = new SpeechSynthesisUtterance('.');
						click.volume = 0;
						window.speechSynthesis.speak(click);
						
						// Only need to do this once
						document.removeEventListener('click', initAudio);
						console.log('Speech synthesis initialized via user interaction');
					}
				});
				
				console.log('Speech synthesis initialized');
			}
		});
	</script>
	<!-- Add this inside the existing script tag after the recognizeHandwriting function -->
<script>
// Add this debugging function to test Tesseract directly
window.testTesseract = function(testWord) {
	console.log(\"Testing Tesseract.js with word:\", testWord || \"test\");
	
	// Log Tesseract status
	console.log(\"Tesseract available:\", typeof Tesseract !== 'undefined');
	console.log(\"tesseractWorker available:\", typeof window.tesseractWorker !== 'undefined');
	
	// Log current challenge word
	console.log(\"Current challenge word:\", window.currentChallengeWord || \"not set\");
	
	// Try to initialize worker if needed
	if (typeof Tesseract !== 'undefined' && typeof window.tesseractWorker === 'undefined') {
		console.log(\"Initializing Tesseract worker...\");
		Tesseract.createWorker({
			logger: progress => console.log('Loading OCR:', progress),
		}).then(worker => {
			window.tesseractWorker = worker;
			worker.load().then(() => {
				worker.loadLanguage('eng').then(() => {
					worker.initialize('eng').then(() => {
						console.log(\"Tesseract worker initialized on demand\");
					});
				});
			});
		});
	}
	
	return \"Tesseract test initiated - check console for results\";
};
</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=true
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=3
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)

[preset.1]

name="Windows Desktop"
platform="Windows Desktop"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="*.env"
exclude_filter=""
export_path="StandaloneTest/index.exe"
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.1.options]

custom_template/debug=""
custom_template/release=""
debug/export_console_wrapper=1
binary_format/embed_pck=false
texture_format/s3tc_bptc=true
texture_format/etc2_astc=false
binary_format/architecture="x86_64"
codesign/enable=false
codesign/timestamp=true
codesign/timestamp_server_url=""
codesign/digest_algorithm=1
codesign/description=""
codesign/custom_options=PackedStringArray()
application/modify_resources=true
application/icon=""
application/console_wrapper_icon=""
application/icon_interpolation=4
application/file_version=""
application/product_version=""
application/company_name=""
application/product_name=""
application/file_description=""
application/copyright=""
application/trademarks=""
application/export_angle=0
application/export_d3d12=0
application/d3d12_agility_sdk_multiarch=true
ssh_remote_deploy/enabled=false
ssh_remote_deploy/host="user@host_ip"
ssh_remote_deploy/port="22"
ssh_remote_deploy/extra_args_ssh=""
ssh_remote_deploy/extra_args_scp=""
ssh_remote_deploy/run_script="Expand-Archive -LiteralPath '{temp_dir}\\{archive_name}' -DestinationPath '{temp_dir}'
$action = New-ScheduledTaskAction -Execute '{temp_dir}\\{exe_name}' -Argument '{cmd_args}'
$trigger = New-ScheduledTaskTrigger -Once -At 00:00
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
$task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings
Register-ScheduledTask godot_remote_debug -InputObject $task -Force:$true
Start-ScheduledTask -TaskName godot_remote_debug
while (Get-ScheduledTask -TaskName godot_remote_debug | ? State -eq running) { Start-Sleep -Milliseconds 100 }
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue"
ssh_remote_deploy/cleanup_script="Stop-ScheduledTask -TaskName godot_remote_debug -ErrorAction:SilentlyContinue
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue
Remove-Item -Recurse -Force '{temp_dir}'"
