[preset.0]

name="Web"
platform="Web"
runnable=true
advanced_options=true
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="*.env, *.js, *.worker.js, *.json, *.html, *.wasm, *.png, *.jpg, *.jpeg, *.svg, *.css, *.ttf, *.otf, *.woff, *.woff2"
exclude_filter=""
export_path="WebTest/index.html"
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=true
encrypt_directory=false
script_export_mode=2

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
variant/thread_support=true
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=true
html/export_icon=true
html/custom_html_shell=""
html/head_include="<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
<meta http-equiv=\"Cross-Origin-Embedder-Policy\" content=\"require-corp\"> 
<meta http-equiv=\"Cross-Origin-Opener-Policy\" content=\"same-origin\">

<script>
    // ===== GLOBAL CONFIGURATION =====
    window.GOOGLE_CLOUD_API_KEY = \"AIzaSyAfffsrJbyG5-4jmJUPh3saHdzAYky7xdg\";

    // ===== STATE MANAGEMENT =====
    // Debug and logging functions
    window.debugLog = function (message) {
        console.log(\"GODOT DEBUG:\", message);
        var debugOutput = document.getElementById('debug-output');
        if (debugOutput) {
            debugOutput.style.display = 'block';
            debugOutput.innerText += message + \"\\n\";
            debugOutput.scrollTop = debugOutput.scrollHeight;
        }
        return true;
    };

    // Speech recognition state
    window.godot_speech = {
        mediaRecorder: null,
        audioChunks: [],
        audioStream: null,
        recording: false,
        permissionState: 'prompt',

        // Debug logging function
        debugLog: function (message) {
            console.log(\"Speech Debug:\", message);
            var debugOutput = document.getElementById('debug-output');
            if (debugOutput) {
                debugOutput.innerText += \"Speech: \" + message + \"\\n\";
                debugOutput.scrollTop = debugOutput.scrollHeight;
            }
        }
    };

    // Challenge word tracking
    window.currentChallengeWord = \"\";
    window.setChallengeWord = function (word) {
        window.currentChallengeWord = word;
        window.challengeWord = word;  // For compatibility with both versions used
        console.log(\"Challenge word set to:\", word);
        window.debugLog(\"Challenge word set to: \" + word);
    };

    // Text-to-Speech functionality
    window.speakText = function (text, voiceId, rate) {
        console.log(\"Speaking text:\", text);

        // Default voice settings
        let voice = null;
        const voices = window.speechSynthesis.getVoices();

        // Try to find the specific voice if provided
        if (voiceId) {
            voice = voices.find(v => v.voiceURI === voiceId);
        }

        // If no voice found or specified, use default English voice
        if (!voice) {
            voice = voices.find(v => v.lang.includes('en') && v.default) ||
                voices.find(v => v.lang.includes('en')) ||
                voices[0];
        }

        if (voice) {
            console.log(\"Speaking text with voice:\", voice.name);
        }

        // Create and configure utterance
        const utterance = new SpeechSynthesisUtterance(text);
        if (voice) utterance.voice = voice;
        utterance.lang = 'en-US';
        utterance.rate = rate || 0.8; // Default to slightly slower rate
        utterance.pitch = 1.0;

        console.log(\"Speaking text with rate\", utterance.rate + \":\", text);

        // Speak the text
        window.speechSynthesis.speak(utterance);
    };

    // Save TTS settings
    window.saveTTSSettings = function (voiceId, rate) {
        localStorage.setItem('tts_voice_id', voiceId);
        localStorage.setItem('tts_rate', rate);
        console.log(\"TTS settings saved:\", voiceId, rate);
    };

    // JavaScript bridge test function
    window.testJavaScriptBridge = function () {
        console.log(\"JavaScript bridge test function called successfully\");
        return \"JavaScript bridge is working!\";
    };

    // ===== IMAGE PROCESSING (VISION API) =====
    // Direct function for Godot to process an image through Google Cloud Vision API
    window.godotProcessImageVision = function (base64Image, width, height) {
        return new Promise(function (resolve, reject) {
            try {
                console.log(\"godotProcessImageVision called with image: \" + width + \"x\" + height);

                // First preprocess the image with timeout handling
                const preprocessPromise = new Promise((resolvePreprocess, rejectPreprocess) => {
                    // Set a timeout for preprocessing
                    const timeoutId = setTimeout(() => {
                        rejectPreprocess(new Error('Preprocessing timed out'));
                    }, 5000);

                    window.preprocessHandwritingImage(base64Image, width, height)
                        .then(function (processedImage) {
                            clearTimeout(timeoutId);
                            resolvePreprocess(processedImage);
                        })
                        .catch(function (error) {
                            clearTimeout(timeoutId);
                            rejectPreprocess(error);
                        });
                });

                preprocessPromise
                    .then(function (processedImage) {
                        // Then call the Cloud Vision API with timeout handling
                        const apiPromise = new Promise((resolveApi, rejectApi) => {
                            // Set a timeout for API call
                            const timeoutId = setTimeout(() => {
                                rejectApi(new Error('API call timed out'));
                            }, 10000);

                            window.callGoogleVisionApi(processedImage)
                                .then(function (result) {
                                    clearTimeout(timeoutId);
                                    console.log('Vision API result:', result);
                                    resolve(result);
                                })
                                .catch(function (error) {
                                    clearTimeout(timeoutId);
                                    console.error('Error in Vision API call:', error);
                                    resolve('recognition_error: ' + error.message);
                                });
                        });

                        return apiPromise;
                    })
                    .catch(function (error) {
                        console.error('Error preprocessing image:', error);
                        resolve('recognition_error: ' + error.message);
                    });
            } catch (error) {
                console.error('Error in image processing:', error);
                resolve('recognition_error: ' + error.message);
            }
        });
    };

    // Function to preprocess images before sending to Cloud Vision API
    window.preprocessHandwritingImage = function (imageBase64, canvasWidth, canvasHeight) {
        return new Promise((resolve) => {
            try {
                console.log(\"Preprocessing image: \" + canvasWidth + \"x\" + canvasHeight);
                const img = new Image();
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                // Use optimal size for text recognition
                const maxSize = 800; // Increased for better OCR accuracy
                let width = canvasWidth;
                let height = canvasHeight;

                // Resize if too large, but maintain aspect ratio
                if (width > maxSize || height > maxSize) {
                    const ratio = width / height;
                    if (width > height) {
                        width = maxSize;
                        height = width / ratio;
                    } else {
                        height = maxSize;
                        width = height * ratio;
                    }
                }

                canvas.width = width;
                canvas.height = height;

                // Add error handling to image loading
                img.onload = function () {
                    // Draw image on white background
                    ctx.fillStyle = 'white';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);

                    // Draw the original image
                    ctx.drawImage(img, 0, 0, width, height);

                    // Enhanced image processing for better text recognition
                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const data = imageData.data;

                    // Two-pass processing for better text recognition

                    // Pass 1: Contrast enhancement
                    for (let i = 0; i < data.length; i += 4) {
                        const r = data[i];
                        const g = data[i + 1];
                        const b = data[i + 2];

                        // Calculate luminance
                        const luminance = 0.299 * r + 0.587 * g + 0.114 * b;

                        // Enhanced contrast with better threshold for handwriting
                        const threshold = 180; // Adjusted for better text detection
                        const value = luminance < threshold ? 0 : 255;

                        data[i] = data[i + 1] = data[i + 2] = value;
                        // Keep alpha channel unchanged
                    }

                    ctx.putImageData(imageData, 0, 0);

                    // Pass 2: Noise reduction and edge enhancement
                    const processedImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const processedData = processedImageData.data;

                    // Simple noise reduction - remove isolated pixels
                    for (let y = 1; y < canvas.height - 1; y++) {
                        for (let x = 1; x < canvas.width - 1; x++) {
                            const idx = (y * canvas.width + x) * 4;

                            // If current pixel is black, check neighbors
                            if (processedData[idx] === 0) {
                                let blackNeighbors = 0;

                                // Check 8 neighbors
                                for (let dy = -1; dy <= 1; dy++) {
                                    for (let dx = -1; dx <= 1; dx++) {
                                        if (dx === 0 && dy === 0) continue;
                                        const nIdx = ((y + dy) * canvas.width + (x + dx)) * 4;
                                        if (processedData[nIdx] === 0) blackNeighbors++;
                                    }
                                }

                                // If isolated black pixel (less than 2 black neighbors), make it white
                                if (blackNeighbors < 2) {
                                    processedData[idx] = processedData[idx + 1] = processedData[idx + 2] = 255;
                                }
                            }
                        }
                    }

                    ctx.putImageData(processedImageData, 0, 0);

                    // Use PNG format for maximum quality
                    try {
                        const pngData = canvas.toDataURL('image/png', 1.0).split(',')[1];
                        console.log('Enhanced preprocessing complete - PNG format with noise reduction');
                        resolve(pngData);
                    } catch (e) {
                        console.error('Error converting processed image:', e);
                        resolve(imageBase64); // Fallback to original image
                    }
                };

                img.onerror = function (e) {
                    console.error('Error loading image for preprocessing:', e);
                    resolve(imageBase64); // Fallback to original image
                };

                // Set crossOrigin to anonymous
                img.crossOrigin = 'Anonymous';
                img.src = 'data:image/png;base64,' + imageBase64;
            } catch (e) {
                console.error('Preprocessing error:', e);
                resolve(imageBase64); // Fallback to original image
            }
        });
    };

    // Google Cloud Vision API implementation
    window.callGoogleVisionApi = async function (base64Image) {
        try {
            console.log('Calling Google Cloud Vision API...');

            // Use the configured API key
            const apiKey = window.GOOGLE_CLOUD_API_KEY;
            if (!apiKey) {
                throw new Error(\"API key not found\");
            }

            const url = 'https://vision.googleapis.com/v1/images:annotate?key=' + apiKey;

            // Log image size to help with debugging
            console.log('Image size (bytes):', Math.round(base64Image.length * 0.75));

            // Prepare the request data with simpler features
            const requestData = {
                requests: [{
                    image: {
                        content: base64Image
                    },
                    features: [{
                        type: 'DOCUMENT_TEXT_DETECTION',
                        maxResults: 5
                    }],
                    imageContext: {
                        languageHints: ['en']
                    }
                }]
            };

            // Send the request with improved error handling
            console.log('Sending request to Vision API...');
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            console.log('Response status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('API error response:', errorText);
                throw new Error(`API request failed: ${response.status} - ${errorText}`);
            }

            const result = await response.json();
            console.log('Vision API response:', result);

            // Extract text from response - handle both annotation types
            if (result.responses && result.responses[0]) {
                // First try fullTextAnnotation
                if (result.responses[0].fullTextAnnotation) {
                    return result.responses[0].fullTextAnnotation.text.trim();
                }
                // Then try textAnnotations
                else if (result.responses[0].textAnnotations && result.responses[0].textAnnotations.length > 0) {
                    return result.responses[0].textAnnotations[0].description.trim();
                }
            }

            return 'no_text_detected';
        } catch (error) {
            console.error('Error in Vision API call:', error);
            return 'recognition_error';
        }
    };

    // ===== UNIFIED INITIALIZATION =====
    document.addEventListener('DOMContentLoaded', function () {
        console.log('Initializing web features');

        // 1. Initialize speech synthesis
        if ('speechSynthesis' in window) {
            console.log('Initializing speech synthesis');

            // Get available voices immediately
            window.speechSynthesis.getVoices();

            // Set up voice change event handler
            if (typeof speechSynthesis.onvoiceschanged !== 'undefined') {
                speechSynthesis.onvoiceschanged = function () {
                    console.log('Voices loaded:', window.speechSynthesis.getVoices().length);
                };
            }

            // Create a silent utterance to initialize the system
            const silence = new SpeechSynthesisUtterance('');
            silence.volume = 0; // Silent
            window.speechSynthesis.speak(silence);

            // Set up user interaction handler for browsers that need it
            document.addEventListener('click', function initAudio() {
                if (window.speechSynthesis) {
                    const click = new SpeechSynthesisUtterance('.');
                    click.volume = 0;
                    window.speechSynthesis.speak(click);

                    // Only need to do this once
                    document.removeEventListener('click', initAudio);
                    console.log('Speech synthesis initialized via user interaction');
                }
            });
        }

        // 2. Check for existing microphone permissions WITHOUT requesting them
        if (navigator.permissions && navigator.permissions.query) {
            navigator.permissions.query({ name: 'microphone' })
                .then(function (permissionStatus) {
                    window.godot_speech.permissionState = permissionStatus.state;
                    console.log('Initial microphone permission state:', permissionStatus.state);

                    // Set up permission change listener
                    permissionStatus.onchange = function () {
                        window.godot_speech.permissionState = this.state;
                        console.log('Microphone permission state changed to:', this.state);
                    };
                })
                .catch(function (error) {
                    console.error('Error checking microphone permission:', error);
                });
        }

        // 3. Setup audio permission request helper - don't automatically request
        window.requestAudioPermission = function () {
            return navigator.mediaDevices.getUserMedia({ audio: true })
                .then(function (stream) {
                    // Stop tracks immediately, we just wanted permission
                    stream.getTracks().forEach(track => track.stop());
                    console.log('Audio permission granted');
                    return true;
                })
                .catch(function (err) {
                    console.error('Audio permission denied:', err);
                    return false;
                });
        };

        // 4. Tell Godot when engine is ready (for the godot_speech object)
        window.addEventListener('godot-engine-ready', function () {
            console.log('Notifying Godot the engine is ready');
        });
    });

    // Clean up audio resources when page is unloaded
    window.addEventListener('beforeunload', function () {
        if (window.godot_speech && window.godot_speech.audioStream) {
            window.godot_speech.audioStream.getTracks().forEach(track => track.stop());
        }
    });

    // ===== OAUTH REDIRECT HANDLING =====
    // Handle OAuth redirect in same tab
    window.addEventListener('load', function () {
        // Check if we're returning from OAuth
        if (window.location.hash.includes('access_token') || window.location.hash.includes('state=google_auth')) {
            console.log('OAuth redirect detected, processing...');
            // The Godot game will handle the token processing

            // Optional: Clean up URL hash after processing
            setTimeout(function () {
                if (window.history && window.history.replaceState) {
                    window.history.replaceState(null, null, window.location.pathname);
                }
            }, 1000);
        }
    });
</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=true
progressive_web_app/enabled=true
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=3
progressive_web_app/orientation=1
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)
");
				const blob = await response.blob();
				
				// Convert to base64
				const reader = new FileReader();
				const base64Promise = new Promise(resolve => {
					reader.onloadend = () => resolve(reader.result.split(',')[1]);
					reader.readAsDataURL(blob);
				});
				const base64Image = await base64Promise;
				
				console.log('Test image loaded, size:', Math.round(base64Image.length / 1024), 'KB');
				
				// Now call the Vision API with the base64 data
				const result = await window.callGoogleVisionApi(base64Image);
				console.log('Test result:', result);
				return 'API test completed with result: ' + result;
			} catch (e) {
				console.error('API test failed:', e);
				return 'API test failed: ' + e.message;
			}
		};

		// Run API test on page load to verify connectivity
		document.addEventListener('DOMContentLoaded', function () {
			// Create debug output div
			var debugOutput = document.createElement('div');
			debugOutput.id = 'debug-output';
			document.body.appendChild(debugOutput);
			
			setTimeout(async function () {
				try {
					window.debugLog(\"Testing Vision API...\");
					const testResult = await window.testVisionAPI();
					window.debugLog('API test result: ' + testResult);
				} catch (error) {
					console.error('API test error:', error);
					window.debugLog('API test error: ' + error.message);
				}
			}, 2000);
		});
	</script>

	<script>
		// Initialize speech synthesis for TTS support
		document.addEventListener('DOMContentLoaded', function () {
			console.log('Initializing speech synthesis');

			if ('speechSynthesis' in window) {
				// Get available voices immediately
				window.speechSynthesis.getVoices();

				// Set up voice change event handler
				if (typeof speechSynthesis.onvoiceschanged !== 'undefined') {
					speechSynthesis.onvoiceschanged = function () {
						console.log('Voices loaded:', window.speechSynthesis.getVoices().length);
					};
				}

				// Create a silent utterance to initialize the system
				const silence = new SpeechSynthesisUtterance('');
				silence.volume = 0; // Silent
				window.speechSynthesis.speak(silence);

				// Set up user interaction handler for browsers that need it
				document.addEventListener('click', function initAudio() {
					if (window.speechSynthesis) {
						const click = new SpeechSynthesisUtterance('.');
						click.volume = 0;
						window.speechSynthesis.speak(click);

						// Only need to do this once
						document.removeEventListener('click', initAudio);
						console.log('Speech synthesis initialized via user interaction');
					}
				});

				console.log('Speech synthesis initialized');
			}
		});
	</script>html/canvas_resize_policy"=2

[preset.1]

name="Windows Desktop"
platform="Windows Desktop"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="*.env"
exclude_filter=""
export_path="StandaloneTest/index.exe"
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.1.options]

custom_template/debug=""
custom_template/release=""
debug/export_console_wrapper=1
binary_format/embed_pck=false
texture_format/s3tc_bptc=true
texture_format/etc2_astc=false
binary_format/architecture="x86_64"
codesign/enable=false
codesign/timestamp=true
codesign/timestamp_server_url=""
codesign/digest_algorithm=1
codesign/description=""
codesign/custom_options=PackedStringArray()
application/modify_resources=true
application/icon=""
application/console_wrapper_icon=""
application/icon_interpolation=4
application/file_version=""
application/product_version=""
application/company_name=""
application/product_name=""
application/file_description=""
application/copyright=""
application/trademarks=""
application/export_angle=0
application/export_d3d12=0
application/d3d12_agility_sdk_multiarch=true
ssh_remote_deploy/enabled=false
ssh_remote_deploy/host="user@host_ip"
ssh_remote_deploy/port="22"
ssh_remote_deploy/extra_args_ssh=""
ssh_remote_deploy/extra_args_scp=""
ssh_remote_deploy/run_script="Expand-Archive -LiteralPath '{temp_dir}\\{archive_name}' -DestinationPath '{temp_dir}'
$action = New-ScheduledTaskAction -Execute '{temp_dir}\\{exe_name}' -Argument '{cmd_args}'
$trigger = New-ScheduledTaskTrigger -Once -At 00:00
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
$task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings
Register-ScheduledTask godot_remote_debug -InputObject $task -Force:$true
Start-ScheduledTask -TaskName godot_remote_debug
while (Get-ScheduledTask -TaskName godot_remote_debug | ? State -eq running) { Start-Sleep -Milliseconds 100 }
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue"
ssh_remote_deploy/cleanup_script="Stop-ScheduledTask -TaskName godot_remote_debug -ErrorAction:SilentlyContinue
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue
Remove-Item -Recurse -Force '{temp_dir}'"

[preset.2]

name="Android"
platform="Android"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path=""
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.2.options]

custom_template/debug=""
custom_template/release=""
gradle_build/use_gradle_build=false
gradle_build/gradle_build_directory=""
gradle_build/android_source_template=""
gradle_build/compress_native_libraries=false
gradle_build/export_format=0
gradle_build/min_sdk=""
gradle_build/target_sdk=""
architectures/armeabi-v7a=false
architectures/arm64-v8a=true
architectures/x86=false
architectures/x86_64=false
version/code=1
version/name=""
package/unique_name="com.example.$genname"
package/name=""
package/signed=true
package/app_category=2
package/retain_data_on_uninstall=false
package/exclude_from_recents=false
package/show_in_android_tv=false
package/show_in_app_library=true
package/show_as_launcher_app=false
launcher_icons/main_192x192=""
launcher_icons/adaptive_foreground_432x432=""
launcher_icons/adaptive_background_432x432=""
launcher_icons/adaptive_monochrome_432x432=""
graphics/opengl_debug=false
xr_features/xr_mode=0
gesture/swipe_to_dismiss=false
screen/immersive_mode=true
screen/support_small=true
screen/support_normal=true
screen/support_large=true
screen/support_xlarge=true
user_data_backup/allow=false
command_line/extra_args=""
apk_expansion/enable=false
apk_expansion/SALT=""
apk_expansion/public_key=""
permissions/custom_permissions=PackedStringArray()
permissions/access_checkin_properties=false
permissions/access_coarse_location=false
permissions/access_fine_location=false
permissions/access_location_extra_commands=false
permissions/access_media_location=false
permissions/access_mock_location=false
permissions/access_network_state=false
permissions/access_surface_flinger=false
permissions/access_wifi_state=false
permissions/account_manager=false
permissions/add_voicemail=false
permissions/authenticate_accounts=false
permissions/battery_stats=false
permissions/bind_accessibility_service=false
permissions/bind_appwidget=false
permissions/bind_device_admin=false
permissions/bind_input_method=false
permissions/bind_nfc_service=false
permissions/bind_notification_listener_service=false
permissions/bind_print_service=false
permissions/bind_remoteviews=false
permissions/bind_text_service=false
permissions/bind_vpn_service=false
permissions/bind_wallpaper=false
permissions/bluetooth=false
permissions/bluetooth_admin=false
permissions/bluetooth_privileged=false
permissions/brick=false
permissions/broadcast_package_removed=false
permissions/broadcast_sms=false
permissions/broadcast_sticky=false
permissions/broadcast_wap_push=false
permissions/call_phone=false
permissions/call_privileged=false
permissions/camera=false
permissions/capture_audio_output=false
permissions/capture_secure_video_output=false
permissions/capture_video_output=false
permissions/change_component_enabled_state=false
permissions/change_configuration=false
permissions/change_network_state=false
permissions/change_wifi_multicast_state=false
permissions/change_wifi_state=false
permissions/clear_app_cache=false
permissions/clear_app_user_data=false
permissions/control_location_updates=false
permissions/delete_cache_files=false
permissions/delete_packages=false
permissions/device_power=false
permissions/diagnostic=false
permissions/disable_keyguard=false
permissions/dump=false
permissions/expand_status_bar=false
permissions/factory_test=false
permissions/flashlight=false
permissions/force_back=false
permissions/get_accounts=false
permissions/get_package_size=false
permissions/get_tasks=false
permissions/get_top_activity_info=false
permissions/global_search=false
permissions/hardware_test=false
permissions/inject_events=false
permissions/install_location_provider=false
permissions/install_packages=false
permissions/install_shortcut=false
permissions/internal_system_window=false
permissions/internet=false
permissions/kill_background_processes=false
permissions/location_hardware=false
permissions/manage_accounts=false
permissions/manage_app_tokens=false
permissions/manage_documents=false
permissions/manage_external_storage=false
permissions/master_clear=false
permissions/media_content_control=false
permissions/modify_audio_settings=false
permissions/modify_phone_state=false
permissions/mount_format_filesystems=false
permissions/mount_unmount_filesystems=false
permissions/nfc=false
permissions/persistent_activity=false
permissions/post_notifications=false
permissions/process_outgoing_calls=false
permissions/read_calendar=false
permissions/read_call_log=false
permissions/read_contacts=false
permissions/read_external_storage=false
permissions/read_frame_buffer=false
permissions/read_history_bookmarks=false
permissions/read_input_state=false
permissions/read_logs=false
permissions/read_media_audio=false
permissions/read_media_images=false
permissions/read_media_video=false
permissions/read_media_visual_user_selected=false
permissions/read_phone_state=false
permissions/read_profile=false
permissions/read_sms=false
permissions/read_social_stream=false
permissions/read_sync_settings=false
permissions/read_sync_stats=false
permissions/read_user_dictionary=false
permissions/reboot=false
permissions/receive_boot_completed=false
permissions/receive_mms=false
permissions/receive_sms=false
permissions/receive_wap_push=false
permissions/record_audio=false
permissions/reorder_tasks=false
permissions/restart_packages=false
permissions/send_respond_via_message=false
permissions/send_sms=false
permissions/set_activity_watcher=false
permissions/set_alarm=false
permissions/set_always_finish=false
permissions/set_animation_scale=false
permissions/set_debug_app=false
permissions/set_orientation=false
permissions/set_pointer_speed=false
permissions/set_preferred_applications=false
permissions/set_process_limit=false
permissions/set_time=false
permissions/set_time_zone=false
permissions/set_wallpaper=false
permissions/set_wallpaper_hints=false
permissions/signal_persistent_processes=false
permissions/status_bar=false
permissions/subscribed_feeds_read=false
permissions/subscribed_feeds_write=false
permissions/system_alert_window=false
permissions/transmit_ir=false
permissions/uninstall_shortcut=false
permissions/update_device_stats=false
permissions/use_credentials=false
permissions/use_sip=false
permissions/vibrate=false
permissions/wake_lock=false
permissions/write_apn_settings=false
permissions/write_calendar=false
permissions/write_call_log=false
permissions/write_contacts=false
permissions/write_external_storage=false
permissions/write_gservices=false
permissions/write_history_bookmarks=false
permissions/write_profile=false
permissions/write_secure_settings=false
permissions/write_settings=false
permissions/write_sms=false
permissions/write_social_stream=false
permissions/write_sync_settings=false
permissions/write_user_dictionary=false
