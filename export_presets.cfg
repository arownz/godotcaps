[preset.0]

name="Web"
platform="Web"
runnable=true
advanced_options=true
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="*.env, *.js"
exclude_filter=""
export_path="WebTest/index.html"
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=true
encrypt_directory=false
script_export_mode=2

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
variant/thread_support=false
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<meta http-equiv=\"Cross-Origin-Opener-Policy\" content=\"same-origin\">
<meta http-equiv=\"Cross-Origin-Embedder-Policy\" content=\"require-corp\">
<!-- Update Tesseract.js to v5 -->
<script src=\"https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js\"></script>

<!-- Add OCR initialization script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize OCR functionality
    window.ocrInitialized = false;
    window.ocrWorker = null;
    
    // Initialize Tesseract.js with v5 API
    window.initializeOCR = function() {
      if (window.ocrInitialized) return Promise.resolve();
      
      // Handle the case where Tesseract fails to load
      if (typeof Tesseract === 'undefined') {
        console.error(\"Tesseract not loaded. Falling back to empty recognition.\");
        window.ocrInitialized = true; // Mark as initialized to prevent further attempts
        return Promise.resolve();
      }
      
      // Use v5 API - createWorker now returns a Promise with the worker
      return Tesseract.createWorker('eng')
        .then(worker => {
          window.ocrWorker = worker;
          window.ocrInitialized = true;
          console.log(\"OCR engine initialized successfully\");
          return worker;
        })
        .catch(err => {
          console.error(\"Failed to initialize OCR:\", err);
          window.ocrInitialized = true; // Mark as initialized to prevent further attempts
          return null;
        });
    };
    
    // Function to recognize handwriting from image
    window.recognizeHandwritingFromImage = function(imageData, callback) {
      console.log(\"Starting handwriting recognition...\");
      
      // If Tesseract isn't loaded, return empty string
      if (typeof Tesseract === 'undefined') {
        console.error(\"Tesseract not loaded. Cannot perform recognition.\");
        setTimeout(() => callback(\"\"), 500);
        return;
      }
      
      if (!window.ocrInitialized) {
        window.initializeOCR().then(processImage).catch(err => {
          console.error(\"OCR initialization failed:\", err);
          callback(\"\");
        });
      } else {
        processImage();
      }
      
      function processImage() {
        // If we don't have a worker, return empty string
        if (!window.ocrWorker) {
          console.error(\"OCR worker not available\");
          callback(\"\");
          return;
        }
        
        // Process the image using Tesseract - v5 API
        window.ocrWorker.recognize(imageData, {}, {
          tessedit_char_whitelist: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        }).then(result => {
          console.log(\"OCR Result:\", result);
          let recognizedText = result.data.text || \"\";
          // Clean up the text
          recognizedText = recognizedText.replace(/\\s+/g, \"\").toLowerCase();
          console.log(\"Recognized text after cleanup:\", recognizedText);
          callback(recognizedText);
        }).catch(err => {
          console.error(\"OCR processing error:\", err);
          callback(\"\");
        });
      }
    };
    
    // Start initializing OCR in the background
    window.initializeOCR().catch(console.error);
    
    // Add utility function to safely handle image data processing errors
    window.handleImageProcessingError = function(error, callback) {
      console.error(\"Image processing error:\", error);
      if (typeof callback === 'function') {
        callback(\"\");
      }
    };
  });
</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=true
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=3
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)

[preset.1]

name="Windows Desktop"
platform="Windows Desktop"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="*.env"
exclude_filter=""
export_path="StandaloneTest/index.exe"
patches=PackedStringArray()
encryption_include_filters=""
encryption_exclude_filters=""
seed=0
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.1.options]

custom_template/debug=""
custom_template/release=""
debug/export_console_wrapper=1
binary_format/embed_pck=false
texture_format/s3tc_bptc=true
texture_format/etc2_astc=false
binary_format/architecture="x86_64"
codesign/enable=false
codesign/timestamp=true
codesign/timestamp_server_url=""
codesign/digest_algorithm=1
codesign/description=""
codesign/custom_options=PackedStringArray()
application/modify_resources=true
application/icon=""
application/console_wrapper_icon=""
application/icon_interpolation=4
application/file_version=""
application/product_version=""
application/company_name=""
application/product_name=""
application/file_description=""
application/copyright=""
application/trademarks=""
application/export_angle=0
application/export_d3d12=0
application/d3d12_agility_sdk_multiarch=true
ssh_remote_deploy/enabled=false
ssh_remote_deploy/host="user@host_ip"
ssh_remote_deploy/port="22"
ssh_remote_deploy/extra_args_ssh=""
ssh_remote_deploy/extra_args_scp=""
ssh_remote_deploy/run_script="Expand-Archive -LiteralPath '{temp_dir}\\{archive_name}' -DestinationPath '{temp_dir}'
$action = New-ScheduledTaskAction -Execute '{temp_dir}\\{exe_name}' -Argument '{cmd_args}'
$trigger = New-ScheduledTaskTrigger -Once -At 00:00
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
$task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings
Register-ScheduledTask godot_remote_debug -InputObject $task -Force:$true
Start-ScheduledTask -TaskName godot_remote_debug
while (Get-ScheduledTask -TaskName godot_remote_debug | ? State -eq running) { Start-Sleep -Milliseconds 100 }
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue"
ssh_remote_deploy/cleanup_script="Stop-ScheduledTask -TaskName godot_remote_debug -ErrorAction:SilentlyContinue
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue
Remove-Item -Recurse -Force '{temp_dir}'"
